import os

import pytest
from typing_extensions import LiteralString

from velocitas_lib.text_helper import (
    replace_line,
    replace_text_area,
)

test_text_literal: list[LiteralString] = """
class SeatsServiceStub(seats_service_sdk.seats_pb2_grpc.SeatsServicer):
    # <auto-generated>
    '''
    @brief Seats service for getting and controlling the positions of the seats and their
    components in the vehicle.
    This definition corresponds to the COVESA Vehicle Service Catalog (VSC) comfort
    seats service definition (https://github.com/COVESA/vehicle_service_catalog)
    '''

    def Move(self, request, context):
        ''' Set the desired seat position

        Returns gRPC status codes:
        * OK - Seat movement started
        * OUT_OF_RANGE - The addressed seat is not present in this vehicle
        * INVALID_ARGUMENT - At least one of the requested component positions is invalid
        * INTERNAL - A seat service internal error happened - see error message for details
        '''
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
        
     # </auto-generated>
""".splitlines()


@pytest.fixture()
def set_env_vars() -> None:
    os.environ["VELOCITAS_WORKSPACE_DIR"] = "./tests/project"


def test_replace_line():
    test_text: list[str] = []
    for text_literal in test_text_literal:
        test_text.append(text_literal)

    assert len(test_text) == 24

    # Replace string
    replaced_text = replace_line(
        test_text,
        "Seats",
        "ReplacedTestString",  # Case sensitive
    )
    matching_count = replaced_text.count("ReplacedTestString")

    assert matching_count == 2

    # No replacement = remove line
    replaced_text = replace_line(
        test_text,
        "'''",
    )

    assert len(replaced_text) == 20


def test_replace_text_area():
    test_text: list[str] = []
    for text_literal in test_text_literal:
        test_text.append(text_literal)

    # Replace string
    replaced_text = replace_text_area(
        test_text,
        "# <auto-generated>",
        "# </auto-generated>",
        "ReplacedTestString",
    )
    matching_count = replaced_text.count("ReplacedTestString")

    assert matching_count == 1

    # No replacement = remove lines
    replaced_text = replace_text_area(
        test_text,
        "'''",
        "'''",
    )

    assert len(replaced_text) == 10
